import com.github.benmanes.gradle.versions.updates.DependencyUpdatesTask
import net.minecraftforge.gradleutils.PomUtils

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'org.cadixdev.licenser' version '0.6.1'
    id 'org.ajoberstar.grgit' version '4.1.1'
    id 'com.github.ben-manes.versions' version '0.47.0'
    id 'org.javamodularity.moduleplugin' version '1.8.12'
    id 'net.minecraftforge.gradleutils' version '2.+'
}

group 'net.minecraftforge'
version = gradleutils.getTagOffsetBranchVersion()
println "Version: $version"

repositories {
    mavenCentral()
    maven gradleutils.forgeMaven
}

dependencies {
    implementation 'cpw.mods:modlauncher:9.0.7'
    implementation 'org.ow2.asm:asm:9.2'
    implementation 'org.ow2.asm:asm-commons:9.2'
    implementation 'org.ow2.asm:asm-tree:9.2'
    implementation 'org.apache.logging.log4j:log4j-api:2.17.0'
    implementation 'org.apache.maven:maven-artifact:3.8.1'
    implementation 'cpw.mods:securejarhandler:0.9.52'
    api('net.minecraftforge:mergetool:1.1.5:api') {
        transitive false
    }

    testRuntimeOnly 'org.apache.logging.log4j:log4j-core:2.17.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.+'
    testImplementation 'org.powermock:powermock-core:2.0.+'
    testImplementation 'org.hamcrest:hamcrest-core:2.2+'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.7.+'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    withSourcesJar()
}

changelog {
    fromTag '1.0.0'
}

license {
    header = file('LICENSE-header.txt')
    newLine = false
    exclude '**/*.properties'
}

static boolean isNonStable(final String version) {
    final boolean stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    return !stableKeyword && !(version ==~ /^[0-9,.v-]+(-r)?$/)
}

tasks.named('dependencyUpdates', DependencyUpdatesTask).configure {
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}

tasks.named('test', Test).configure {
    useJUnitPlatform()
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes('Automatic-Module-Name': 'net.minecraftforge.forgespi')
        attributes(['Specification-Title': 'forgespi',
                    'Specification-Vendor': 'forge',
                    'Specification-Version': '5', // Currently version 4 of the forgespi specification
                    'Implementation-Title': project.name,
                    'Implementation-Version': "${project.version}+${System.getenv('BUILD_NUMBER') ?: 0}+${gradleutils.gitInfo.branch}.${gradleutils.gitInfo.abbreviatedId}",
                    'Implementation-Vendor': 'forge',
                    'Git-Commit': gradleutils.gitInfo.abbreviatedId,
                    'Git-Branch': gradleutils.gitInfo.branch,
                    'Build-Number': "${System.getenv('BUILD_NUMBER') ?: 0}"],
                'net/minecraftforge/forgespi/')
    }
}

artifacts {
    archives jar
    archives sourcesJar
}

publishing {
    publications.register('mavenJava', MavenPublication) {
        from components.java
        artifact sourcesJar

        artifactId = 'forgespi'

        pom {
            name = 'Forge Service Provider Interface'
            description = 'API for services which can plug into forge, or which are used by forge in other places'
            url = 'https://github.com/MinecraftForge/ForgeSPI'

            PomUtils.setGitHubDetails(pom, 'ForgeSPI')

            license PomUtils.Licenses.LGPLv2_1

            developers {
                developer PomUtils.Developers.cpw
            }
        }
    }

    repositories {
        maven gradleutils.getPublishingForgeMaven()
    }
}
